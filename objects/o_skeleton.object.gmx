<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_skeleton_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_lifeform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//Variables
image_speed = 0.2
state = "Move";
run_speed = 2;
roll_speed = 3;
hp = 100;
max_hp = hp;

//Dependencies
input = instance_create(0,0, o_input);


show_debug_message(state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch (state)
{
    case "Move":
    if state == "Move" 
{
    if input.right
   {
    move_and_collide(run_speed,0);
    image_xscale = 1;
    image_speed = 0.15;
    sprite_index = s_skeleton_run;
 
    }
if input.left
   { 
   move_and_collide(-run_speed,0);
    image_xscale = -1;
    image_speed = 0.15; 
    sprite_index = s_skeleton_run;
    
    }

if !input.right &amp;&amp; !input.left
   {
    sprite_index = s_skeleton_idle;
    image_speed = 0.1;
    }

if input.roll
   {
    state = "Roll"
    
    }
if input.attack
    {
    state = "Attack 1"
    
    }
}
         break;
         
    case "Roll":
    if state == "Roll" {
    set_state_sprite(s_skeleton_roll,0.2,0);
   
   if image_xscale == 1 
   {
      move_and_collide(roll_speed,0)
   }
   
   if image_xscale == -1 
   {
      move_and_collide(-roll_speed,0)
   }
}

        if animation_end()
        {
            state = "Move"
        }
        if animation_hit_frame(1)
        {
            show_debug_message(image_index);
        }
         break;
         
         case "Attack 1":
         if state == "Attack 1" {
         set_state_sprite(s_skeleton_attack_one,0.2,0);
         
         if animation_hit_frame(0)
         {
          create_hitbox(x,y,id,s_skeleton_attack_one_damage, 3, 4, 5, image_xscale);
         }
         
         if input.attack &amp;&amp; animation_hit_frame_range(2,4)
        {
        
        state = "Attack 2"
        
        }
        if animation_end()
         {
          state = "Move";
         }
         }
         
              break;
         case "Attack 2":
         
          if state == "Attack 2" {
         set_state_sprite(s_skeleton_attack_two,0.2,0);
        if animation_hit_frame(1)
         {
         show_debug_message("Attack 2 Hitbox");
          create_hitbox(x,y,id,s_skeleton_attack_two_damage, 3, 4, 5, image_xscale);
         }
         
         if input.attack &amp;&amp; animation_hit_frame_range(2,4)
        {
        
        state = "Attack 3"
        
        }
        if animation_end()
         {
          state = "Move";
         }
         }
         
         
              break;
         case "Attack 3":
         if state == "Attack 3" {
              set_state_sprite(s_skeleton_attack_three,0.2,0)
              if animation_hit_frame(2)
         {
          create_hitbox(x,y,id,s_skeleton_attack_three_damage, 4, 4, 8, image_xscale);
         }
              
              
         if animation_end()
         {
          state = "Move";
         }
        }
              break;
           case "Knockback":
           knockback_state(s_skeleton_hitstun, "Move");
           break;
              
              
      default:
        show_debug_message("State " +state+" does not exist");
        state = "Move"
        break        
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
